import cv2
import mediapipe as mp
import numpy as np
from tensorflow.keras.models import load_model

# Load your MNIST model
model = load_model("mnistNeuNet.keras")

# Mediapipe Hands setup
mp_hands = mp.solutions.hands
mp_drawing = mp.solutions.drawing_utils
hands = mp_hands.Hands(max_num_hands=1, min_detection_confidence=0.7)

# Drawing canvas
canvas = np.ones((480, 640), dtype=np.uint8) * 255  # white background
drawing = False
prev_x, prev_y = None, None

cap = cv2.VideoCapture(0)

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    frame = cv2.flip(frame, 1)  # mirror effect
    rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    results = hands.process(rgb)

    if results.multi_hand_landmarks:
        for hand_landmarks in results.multi_hand_landmarks:
            mp_drawing.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)

            # Get landmark positions
            h, w, _ = frame.shape
            landmarks = [(int(lm.x * w), int(lm.y * h)) for lm in hand_landmarks.landmark]

            # Palm open/closed detection: measure distance between thumb tip & index tip
            thumb_tip = landmarks[4]
            index_tip = landmarks[8]
            distance = np.linalg.norm(np.array(thumb_tip) - np.array(index_tip))

            if distance > 80:  # open palm → toggle drawing OFF
                if drawing:
                    drawing = False
                    # Process drawing for prediction
                    x, y, w_box, h_box = cv2.boundingRect(cv2.findNonZero(255 - canvas))
                    roi = canvas[y:y+h_box, x:x+w_box]

                    # Preprocess into MNIST format
                    roi = cv2.resize(roi, (28, 28), interpolation=cv2.INTER_AREA)
                    roi = cv2.bitwise_not(roi)  # invert to match MNIST (white on black)
                    roi = roi.astype("float32") / 255.0
                    roi = roi.reshape(1, 28, 28, 1)

                    # Predict digit
                    prediction = model.predict(roi)
                    digit = np.argmax(prediction)

                    # Show result below image
                    cv2.putText(frame, f"Prediction: {digit}", (50, 450),
                                cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)

            else:  # closed hand → drawing ON
                drawing = True
                index_finger = landmarks[8]
                x, y = index_finger
                if prev_x is not None and prev_y is not None:
                    cv2.line(canvas, (prev_x, prev_y), (x, y), 0, 12)
                prev_x, prev_y = x, y
    else:
        prev_x, prev_y = None, None

    # Show canvas merged with webcam feed
    frame_with_canvas = cv2.addWeighted(frame, 1, cv2.cvtColor(canvas, cv2.COLOR_GRAY2BGR), 0.5, 0)

    cv2.imshow("Finger Drawing", frame_with_canvas)

    if cv2.waitKey(1) & 0xFF == 27:  # ESC to exit
        break

cap.release()
cv2.destroyAllWindows()
